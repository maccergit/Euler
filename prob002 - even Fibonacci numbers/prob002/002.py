# coding: utf8
"""
# Even Fibonacci numbers
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#
# Don't generate odd values - take advantage that even values are every 3rd fibonacci number, and then simplify to get modified fibonacci generator:
#     E(n) = 4 * E(n - 1) + E(n - 2)
#
# python:
#     10      : .75 µsec
#     100     : .90 µsec
#     1000    : 1.2 µsec
#     10000   : 1.4 µsec
#     100000  : 1.6 µsec
#     1000000 : 1.9 µsec
#     4000000 : 2.0 µsec
#
# jython:
#     10      : 1.9 µsec
#     100     : 2.2 µsec
#     1000    : 4.3 µsec
#     10000   : 4.4 µsec
#     100000  : 4.5 µsec
#     1000000 : 4.6 µsec
#     4000000 : 4.6 µsec
#
# O(log n)
"""

import timeit

def evenFib(first, second, limit):
    yield first
    while second <= limit:
        yield second
        first, second = second, 4 * second + first

def getSolution(limit):
    return sum(x for x in evenFib(2, 8, limit))

assert getSolution(10) == 10
assert getSolution(100) == 44

def timeProblem(probLimit, count = 10000):
    print getSolution(probLimit)
    print(str(timeit.timeit("getSolution(" + str(probLimit) + ")", setup = "from __main__ import getSolution", number = count) / count * 1000000) + " µsec")

assert getSolution(4000000) == 4613732
timeProblem(4000000, 100000)