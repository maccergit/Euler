# coding: utf8
"""
# Even Fibonacci numbers
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#
# Brute force - sum generated values that are even.  While it's possible to avoid the check for even by only taking every 3rd generated value, it turns out not to be worth it.
#
# python:
#     10      : 1.27 µsec
#     100     : 1.99 µsec
#     1000    : 2.8 µsec
#     10000   : 3.5 µsec
#     100000  : 4.3 µsec
#     1000000 : 5.0 µsec
#     4000000 : 5.4 µsec
#
# jython:
#     10      : 3.5 µsec
#     100     : 3.6 µsec
#     1000    : 4.4 µsec
#     10000   : 4.5 µsec
#     100000  : 5.4 µsec
#     1000000 : 6.0 µsec
#     4000000 : 6.4 µsec
#
# O(log n)
"""

import timeit

def fibb(first, second, limit):
    yield first
    while second <= limit:
        yield second
        first, second = second, first + second

def getSolution(limit):
    return sum(x for x in fibb(1, 2, limit) if x % 2 == 0)

assert getSolution(10) == 10
assert getSolution(100) == 44

def timeProblem(probLimit, count = 10000):
    print getSolution(probLimit)
    print(str(timeit.timeit("getSolution(" + str(probLimit) + ")", setup = "from __main__ import getSolution", number = count) / count * 1000000) + " µsec")

assert getSolution(4000000) == 4613732
timeProblem(4000000)