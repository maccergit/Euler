# coding: utf8
"""
# Even Fibonacci numbers
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#
# Use closed form of fibonacci numbers (Binet's formula) to get every 3rd fibonacci number and sum them.  To get the index, the formula is reworked to get:
#     index = (log(N) + log(5) / 2) / log(phi)
#
# python:
#     10      : 3.0 µsec
#     100     : 3.4 µsec
#     1000    : 4.5 µsec
#     10000   : 5.0 µsec
#     100000  : 6.1 µsec
#     1000000 : 7.1 µsec
#     4000000 : 7.7 µsec
#
# jython:
#     10      : 14.0 µsec
#     100     : 14.5 µsec
#     1000    : 17.0 µsec
#     10000   : 17.4 µsec
#     100000  : 18.0 µsec
#     1000000 : 19 µsec
#     4000000 : 20 µsec
#
# O(log n)
"""

import timeit
import math

def getSolution(limit):
    root5 = (5 ** 0.5)
    phi = (1 + root5) / 2
    upsilon = 1 - phi
    i = int((math.log(limit) + math.log(5) / 2.0) / math.log(phi) / 3)
    return sum(int((phi ** y - upsilon ** y) / root5) for y in (3 * (x + 1) for x in xrange(i)))

assert getSolution(10) == 10
assert getSolution(100) == 44

def timeProblem(probLimit, count = 10000):
    print getSolution(probLimit)
    print(str(timeit.timeit("getSolution(" + str(probLimit) + ")", setup = "from __main__ import getSolution", number = count) / count * 1000000) + " µsec")

assert getSolution(4000000) == 4613732
timeProblem(4000000)